#include <iostream>
#include <thread>

#include "types.hpp"
#include "timers.hpp"
#include "cpu.hpp"
#include "sys.hpp"

using namespace std::chrono_literals;

extern u32 verbose;

namespace SCT {
    u32 lastTick;
    
    
    struct SCT {
	
	u32 CONFIG,
	    CTRL,
	    LIMIT,
	    STOP,
	    START,
	    COUNT,
	    STATE,
	    INPUT,
	    REGMODE,
	    OUTPUT,
	    OUTPUTDIRCTRL,
	    RES,
	    DMAREQ0,
	    DMAREQ1,
	    EVEN,
	    EVFLAG,
	    CONEN,
	    CONFLAG,
	    MATCH0,
	    MATCH1,
	    MATCH2,
	    MATCH3,
	    MATCH4,
	    MATCHREL0,
	    MATCHREL1,
	    MATCHREL2,
	    MATCHREL3,
	    MATCHREL4,
	    EV0_STATE, EV0_CTRL,
	    EV1_STATE, EV1_CTRL,
	    EV2_STATE, EV2_CTRL,
	    EV3_STATE, EV3_CTRL,
	    EV4_STATE, EV4_CTRL,
	    EV5_STATE, EV5_CTRL,
	    OUT0_SET, OUT0_CLR,
	    OUT1_SET, OUT1_CLR,
	    OUT2_SET, OUT2_CLR,
	    OUT3_SET, OUT3_CLR
	    ;
	
	void init(){
	    CONFIG = 0x7E00;
	    CTRL = 0x00040004;
	    LIMIT = 0;
	    STOP = 0;
	    START = 0;
	    COUNT = 0;
	    STATE = 0;
	    INPUT = 0;
	    REGMODE = 0;
	    OUTPUT = 0;
	    OUTPUTDIRCTRL = 0;
	    RES = 0;
	    DMAREQ0 = 0;
	    DMAREQ1 = 0;
	    EVEN = 0;
	    EVFLAG = 0;
	    CONEN = 0;
	    CONFLAG = 0;
	    MATCH0 = 0;
	    MATCH1 = 0;
	    MATCH2 = 0;
	    MATCH3 = 0;
	    MATCH4 = 0;
	    MATCHREL0 = 0;
	    MATCHREL1 = 0;
	    MATCHREL2 = 0;
	    MATCHREL3 = 0;
	    MATCHREL4 = 0;
	    EV0_STATE = 0; EV0_CTRL = 0;
	    EV1_STATE = 0; EV1_CTRL = 0;
	    EV2_STATE = 0; EV2_CTRL = 0;
	    EV3_STATE = 0; EV3_CTRL = 0;
	    EV4_STATE = 0; EV4_CTRL = 0;
	    EV5_STATE = 0; EV5_CTRL = 0;
	    OUT0_SET = 0; OUT0_CLR = 0;
	    OUT1_SET = 0; OUT1_CLR = 0;
	    OUT2_SET = 0; OUT2_CLR = 0;
	    OUT3_SET = 0; OUT3_CLR = 0;	    
	}
	
    } SCT0, SCT1;

    MMU::Register sct0Map[] = {
	MMUREG(SCT0.CONFIG),
	MMUREG(SCT0.CTRL),
	MMUREG(SCT0.LIMIT),
	MMUREG(SCT0.STOP),
	MMUREG(SCT0.START),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), 
	MMUREG(SCT0.COUNT),
	MMUREG(SCT0.STATE),
	MMUREG(SCT0.INPUT),
	MMUREG(SCT0.REGMODE),
	MMUREG(SCT0.OUTPUT),
	MMUREG(SCT0.OUTPUTDIRCTRL),
	MMUREG(SCT0.RES),
	MMUREG(SCT0.DMAREQ0),
	MMUREG(SCT0.DMAREQ1),

	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(),
	
	MMUREG(SCT0.EVEN),
	MMUREG(SCT0.EVFLAG),
	MMUREG(SCT0.CONEN),
	MMUREG(SCT0.CONFLAG),
	MMUREG(SCT0.MATCH0),
	MMUREG(SCT0.MATCH1),
	MMUREG(SCT0.MATCH2),
	MMUREG(SCT0.MATCH3),
	MMUREG(SCT0.MATCH4),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREG(SCT0.MATCHREL0),
	MMUREG(SCT0.MATCHREL1),
	MMUREG(SCT0.MATCHREL2),
	MMUREG(SCT0.MATCHREL3),
	MMUREG(SCT0.MATCHREL4),

	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//0
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//1
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//2
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//3
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//4
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//5
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//6
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//7
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//8
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//9
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//A
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//B
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//C
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//D
	MMUREGX(),MMUREGX(),MMUREGX(),//E

	MMUREG(SCT0.EV0_STATE), MMUREG(SCT0.EV0_CTRL),
	MMUREG(SCT0.EV1_STATE), MMUREG(SCT0.EV1_CTRL),
	MMUREG(SCT0.EV2_STATE), MMUREG(SCT0.EV2_CTRL),
	MMUREG(SCT0.EV3_STATE), MMUREG(SCT0.EV3_CTRL),
	MMUREG(SCT0.EV4_STATE), MMUREG(SCT0.EV4_CTRL),
	MMUREG(SCT0.EV5_STATE), MMUREG(SCT0.EV5_CTRL),
	#include "mmuregx16.h"	
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),

	MMUREG(SCT0.OUT0_SET), MMUREG(SCT0.OUT0_CLR),
	MMUREG(SCT0.OUT1_SET), MMUREG(SCT0.OUT1_CLR),
	MMUREG(SCT0.OUT2_SET), MMUREG(SCT0.OUT2_CLR),
	MMUREG(SCT0.OUT3_SET), MMUREG(SCT0.OUT3_CLR),	    
    };
    
    MMU::Register sct1Map[] = {
	MMUREG(SCT1.CONFIG),
	MMUREG(SCT1.CTRL),
	MMUREG(SCT1.LIMIT),
	MMUREG(SCT1.STOP),
	MMUREG(SCT1.START),
	MMUREG(SCT1.COUNT),
	MMUREG(SCT1.STATE),
	MMUREG(SCT1.INPUT),
	MMUREG(SCT1.REGMODE),
	MMUREG(SCT1.OUTPUT),
	MMUREG(SCT1.OUTPUTDIRCTRL),
	MMUREG(SCT1.RES),
	MMUREG(SCT1.DMAREQ0),
	MMUREG(SCT1.DMAREQ1),

	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(),
	
	MMUREG(SCT1.EVEN),
	MMUREG(SCT1.EVFLAG),
	MMUREG(SCT1.CONEN),
	MMUREG(SCT1.CONFLAG),
	MMUREG(SCT1.MATCH0),
	MMUREG(SCT1.MATCH1),
	MMUREG(SCT1.MATCH2),
	MMUREG(SCT1.MATCH3),
	MMUREG(SCT1.MATCH4),

	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(),
	
	MMUREG(SCT1.MATCHREL0),
	MMUREG(SCT1.MATCHREL1),
	MMUREG(SCT1.MATCHREL2),
	MMUREG(SCT1.MATCHREL3),
	MMUREG(SCT1.MATCHREL4),

	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//0
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//1
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//2
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//3
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//4
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//5
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//6
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//7
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//8
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//9
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//A
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//B
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//C
	MMUREGX(),MMUREGX(),MMUREGX(),MMUREGX(),//D
	MMUREGX(),MMUREGX(),MMUREGX(),//E
	
	MMUREG(SCT1.EV0_STATE), MMUREG(SCT1.EV0_CTRL),
	MMUREG(SCT1.EV1_STATE), MMUREG(SCT1.EV1_CTRL),
	MMUREG(SCT1.EV2_STATE), MMUREG(SCT1.EV2_CTRL),
	MMUREG(SCT1.EV3_STATE), MMUREG(SCT1.EV3_CTRL),
	MMUREG(SCT1.EV4_STATE), MMUREG(SCT1.EV4_CTRL),
	MMUREG(SCT1.EV5_STATE), MMUREG(SCT1.EV5_CTRL),
	#include "mmuregx16.h"	
	#include "mmuregx16.h"	
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),
	MMUREGX(), MMUREGX(), MMUREGX(), MMUREGX(),

	MMUREG(SCT1.OUT0_SET), MMUREG(SCT1.OUT0_CLR),
	MMUREG(SCT1.OUT1_SET), MMUREG(SCT1.OUT1_CLR),
	MMUREG(SCT1.OUT2_SET), MMUREG(SCT1.OUT2_CLR),
	MMUREG(SCT1.OUT3_SET), MMUREG(SCT1.OUT3_CLR),	    
    };

    MMU::Layout sct0Layout = {
	0x5000C000,
	sizeof(sct0Map) / sizeof(sct0Map[0]),
	sct0Map
    };


    MMU::Layout sct1Layout = {
	0x5000E000,
	sizeof(sct1Map) / sizeof(sct1Map[0]),
	sct1Map
    };
    
    void init(){
	SCT0.init();
	SCT1.init();
	
	/* * /
	for( u32 i=0; i<sizeof(sct0Map)/sizeof(sct0Map[0]); ++i ){
	    std::cout << sct0Map[i].name
		      << " "
		      << std::hex
		      << (sct0Layout.base+(i*4))
		      << std::endl;
	}
	/* */
    }
    
}
